// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectsPortalBackend.Data;

#nullable disable

namespace assetManagementBackend.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20221008132636_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectsPortalBackend.Models.BudgetSource", b =>
                {
                    b.Property<int>("BudgetSourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BudgetSourceID"));

                    b.Property<string>("BudgetSourceName")
                        .HasColumnType("text");

                    b.HasKey("BudgetSourceID");

                    b.ToTable("BudgetSources");
                });

            modelBuilder.Entity("ProjectsPortalBackend.Models.BusinessUnit", b =>
                {
                    b.Property<int>("BusinessUnitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BusinessUnitID"));

                    b.Property<string>("BusinessUnitName")
                        .HasColumnType("text");

                    b.Property<int>("DistrictID")
                        .HasColumnType("integer");

                    b.HasKey("BusinessUnitID");

                    b.HasIndex("DistrictID");

                    b.ToTable("BusinessUnits");
                });

            modelBuilder.Entity("ProjectsPortalBackend.Models.District", b =>
                {
                    b.Property<int>("DistrictID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DistrictID"));

                    b.Property<int>("BudgetSourceID")
                        .HasColumnType("integer");

                    b.Property<string>("DistrictName")
                        .HasColumnType("text");

                    b.HasKey("DistrictID");

                    b.HasIndex("BudgetSourceID");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("ProjectsPortalBackend.Models.LogOperations", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogID"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LogSituation")
                        .HasColumnType("boolean");

                    b.Property<string>("Process")
                        .HasColumnType("text");

                    b.Property<string>("Statement")
                        .HasColumnType("text");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<string>("UserIp")
                        .HasColumnType("text");

                    b.HasKey("LogID");

                    b.ToTable("LogOperations");
                });

            modelBuilder.Entity("ProjectsPortalBackend.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("Budget")
                        .HasColumnType("integer");

                    b.Property<int>("BusinessUnitID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("ProjectId");

                    b.HasIndex("BusinessUnitID");

                    b.HasIndex("UserID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectsPortalBackend.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("UserDepartment")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.Property<string>("UserFirstname")
                        .HasColumnType("text");

                    b.Property<string>("UserPassword")
                        .HasColumnType("text");

                    b.Property<bool>("UserRole")
                        .HasColumnType("boolean");

                    b.Property<string>("UserSecondname")
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProjectsPortalBackend.Models.BusinessUnit", b =>
                {
                    b.HasOne("ProjectsPortalBackend.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("ProjectsPortalBackend.Models.District", b =>
                {
                    b.HasOne("ProjectsPortalBackend.Models.BudgetSource", "BudgetSource")
                        .WithMany()
                        .HasForeignKey("BudgetSourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BudgetSource");
                });

            modelBuilder.Entity("ProjectsPortalBackend.Models.Project", b =>
                {
                    b.HasOne("ProjectsPortalBackend.Models.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectsPortalBackend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessUnit");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
